" Startup Config {{{
" Use Vim settings, rather than Vi settings
" This must be first, because it changes other options as a side effect.
set nocompatible
set packpath+=~/.vim/pack
let mapleader = ","
" using viminfo file to save info when exiting Vim and starting up again
" TODO: consider using session-files
set viminfo=""
set history=1024
set cpoptions-=C
set shortmess+=I
set cf
" }}}

" Files {{{
set autowrite
set autoread
set ff=unix
set encoding=utf8
set fileencoding=utf-8
" }}}

" Colors {{{
" TODO: Pick a colorscheme probably and set it here
set background=dark
" guard it since syntax enable can overwrite settings set by a colorscheme
" see https://stackoverflow.com/questions/33380451/is-there-a-difference-between-syntax-on-and-syntax-enable-in-vimscript
if !exists("g:syntax_on")
    syntax enable
endif
" }}}

" Misc {{{
set clipboard=unnamed
" Allow project-specific .vimrc files
" Only works if you start vim from the project root directory
set exrc
set noerrorbells
set visualbell
set include="#include \\(<boost\\)\\@!"
set cm=blowfish2      " encryption
set modeline
" }}}

" Spaces & Tabs {{{
set tabstop=4           " show existing tab with 4 spaces width
set softtabstop=4       " number of spaces in tab when editing
set expandtab           " turn tabs into spaces. So, a tab is like 4 spaces
set backspace=2
set shiftwidth=4    " when indenting with '>', use 4 spaces width
set backspace=indent,eol,start
" }}}

" UI {{{
set number
" enable file type detection
" load filetype-specific indent files
" https://vi.stackexchange.com/questions/10124/what-is-the-difference-between-filetype-plugin-indent-on-and-filetype-indent
filetype plugin indent on
set wildmenu              " visual autocomplete for command menu
set wildmode=longest,list
set lazyredraw            " redraw only when we need to
set completeopt=longest,menuone
set showmatch             " highlight matching [{()}]
set matchtime=2
set smartindent
set cindent
set autoindent
set cursorline
set cursorcolumn
set tabpagemax=10
set showtabline=0 " TODO: play around with setting to '2' (always)
set nowrap
set hidden
set noequalalways
set highlight=sb
set ruler
set completeopt=longest,menuone
set titlestring="Vim: %f%m"
set title
" }}}

" Searching {{{
set incsearch         " search as new characters entered
set hlsearch          " highlight searches
set nocp incsearch
set nocp hlsearch
set ignorecase
set smartcase
" }}}

" Folding {{{
set foldenable           " enable folding
set foldlevelstart=10    " open most folds by default
set foldmethod=marker
set foldnestmax=10
set foldcolumn=0
" }}}

" Backups & Undos {{{
" using // so we can modify two files with the same name at the same time
" see https://vi.stackexchange.com/questions/16037/vim-swap-file-best-practices
set backupdir=$HOME/.vim//backup//
set directory^=$HOME/.vim//backup//
set undofile
set undodir=~/.vim/.undo
" }}}

" Global options and variables {{{
let g:lines=70
let g:columns=240
let g:includes=''
let g:load_doxygen_syntax = 1
let g:whoami=system("whoami | xargs echo -n")
let g:pwd=system("pwd | xargs echo -n")
let g:vimHome='/home/'.g:whoami.'/.vim'
" }}}

" Autocommands {{{
" TODO: consider namespacing the autocommand groups by declaring here and
" defining elsewhere. This will help keep the vimrc minimal.
" See https://vi.stackexchange.com/questions/9455/why-should-i-use-augroup

" Strip trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

augroup cpp_comments
    autocmd!
    " See https://vi.stackexchange.com/questions/1983/how-can-i-get-vim-to-stop-putting-comments-in-front-of-new-lines
    au FileType c,cpp setlocal comments-=:// comments+=f://
    au FileType c,cpp set mps+==:;
augroup END

augroup cpp_setup
    autocmd!
    au BufEnter *.c,*.cpp,*.cc,*.cxx,*.h,*.hpp,*.hh,*.hxx set colorcolumn=80 | set expandtab | set cindent | setlocal spell spelllang=en_us
augroup END

augroup cpp_dev
    autocmd!
    au BufEnter *.h,*.hpp,*.hh,*.hxx let b:fswitchdst='cpp,cc,C,cxx,c'
    au BufEnter *.h,*.hpp,*.hh,*.hxx let b:fswitchlocs='.,../Source,../src,source,src,../source'
    au BufEnter *.c,*.cpp,*.cc,*.cxx let b:fswitchdst='h,hpp,hxx,hh'
    au BufEnter *.c,*.cpp,*.cc,*.cxx let b:fswitchlocs='.,../Include,../inc,include,inc,../include'
augroup END

augroup cpp_clang_format
    autocmd!
    " run clang-format over a visual block of C++ code using <Leader>cf
    autocmd FileType c,cpp nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp vnoremap <buffer><Leader>cf :ClangFormat<CR>
    " This relies on using vim-operator-user
    autocmd FileType c,cpp map <buffer><Leader>x <Plug>(operator-clang-format)
    " Run clang-format on write to buffer (by default using .clang-format file since no options
    " specified here)
    autocmd FileType c,cpp ClangFormatAutoEnable
augroup END

augroup filetypes
    autocmd!
    au Bufread *.uml set ft=plantuml
    au Bufread *.plantuml set ft=plantuml
augroup END

augroup cucumber_format
    " Auto format cucumber tables
    autocmd BufWritePost *.feature set ft=cucumber
augroup END
" }}}

" Must be last line in vimrc as this is our modeline saying to apply this
" setting only to this file.
" vim:foldmethod=marker:foldlevel=0
